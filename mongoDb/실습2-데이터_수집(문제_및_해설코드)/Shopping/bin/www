#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Shopping:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var mongoose = require('mongoose');
mongoose.connect('mongodb://127.0.0.1:27017/test');
var Schema = mongoose.Schema, ObjectId = Schema.ObjectId;
var itemSchema = new Schema({
	id : ObjectId, title:String, publish_date:String, shoppingmall_count:String,
	maker:String, link:String, shoppingmall:String, review_count:String, brand:String,
	product_type:String, price_max:String, price_group:String, price_min:String,
	docid:String, description:String, category_name:String, image_url:String
});
var ItemModel = mongoose.model('shopping_item', itemSchema);

var apikey = "apikey";
var query = "wii";
var options = {
		host:'apis.daum.net',
		port:80,
		path:'/shopping/search?apikey='+apikey+'&q='+query+'&output=json'
};
//https://apis.daum.net/shopping/search?apikey=21b0b013d4ad0c36a5b5e183d8ec4032&q=%EC%8B%A0%ED%95%99%EA%B8%B0%20%EA%B0%80%EB%B0%A9&result=20&pageno=3&output=json&sort=min_price
http.get(options, function(res) {
	var body = "";
	res.addListener('data',function(chunk){
		body += chunk;
	});
	res.addListener('end', function() {
		//console.log(body);
		var obj = JSON.parse(body);
		for (itemName in obj.channel.item) {
			var itemObj = obj.channel.item[itemName];
			var item = new ItemModel();
			item.title = itemObj.title;					item.publish_date = itemObj.publish_date;
			item.shoppingmall_count = itemObj.shoppingmall_count;
			item.maker = itemObj.maker;					item.link = itemObj.link;
			item.shoppingmall = itemObj.shoppingmall;	item.review_count = itemObj.review_count;
			item.brand = itemObj.brand;					item.product_type = itemObj.product_type;
			item.price_max = itemObj.price_max;			item.price_group = itemObj.price_group;
			item.price_min = itemObj.price_min;			item.docid = itemObj.docid;
			item.description = itemObj.description;		item.category_name = itemObj.category_name;
			item.image_url = itemObj.image_url;
			item.save(function(err) { if (err) return handleError(err); });
		}
	});
});
app.get('/', function(req,res) {
	ItemModel.find({}, function(err, docs) {
		res.render('index.jade', 
			{title:'Daum Shopping Open API',items:docs});
	});
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
